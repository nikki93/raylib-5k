// Most of the Raylib API is covered in ./generated.gx.go which is generated by
// ./generator/generator.go.
//
// This file has some types and functions that need manual definitions.

package rl

import (
	. "github.com/nikki93/dream-hotel/core/geom"
)

//
// Colors (pure, not based on Raylib palette)
//

var White = Color{0xff, 0xff, 0xff, 0xff}
var Black = Color{0x00, 0x00, 0x00, 0xff}
var Red = Color{0xff, 0x00, 0x00, 0xff}
var Green = Color{0x00, 0xff, 0x00, 0xff}
var Blue = Color{0x00, 0x00, 0xff, 0xff}

//
// Type aliases
//

//gx:extern rl::TextureCubemap
type TextureCubemap Texture

//gx:extern rl::rlRenderTexture2D
type RenderTexture2D RenderTexture

//gx:extern rl::rlCamera
type Camera Camera3D

//
// RLGL
//

// GL_LINES
//gx:extern RL_LINES
const Lines = 0x0001

// GL_TRIANGLES
//gx:extern RL_TRIANGLES
const Triangles = 0x0004

// GL_QUADS
//gx:extern RL_QUADS
const Quads = 0x0007

// Choose the current matrix to be transformed
//gx:extern rl::rlMatrixMode
func MatrixMode(mode int)

// Push the current matrix to stack
//gx:extern rl::rlPushMatrix
func PushMatrix()

// Pop lattest inserted matrix from stack
//gx:extern rl::rlPopMatrix
func PopMatrix()

// Reset current matrix to identity matrix
//gx:extern rl::rlLoadIdentity
func LoadIdentity()

// Multiply the current matrix by a translation matrix
//gx:extern rl::rlTranslatef
func Translatef(x, y, z float64)

// Multiply the current matrix by a rotation matrix
//gx:extern rl::rlRotatef
func Rotatef(angleDeg, x, y, z float64)

// Multiply the current matrix by a scaling matrix
//gx:extern rl::rlScalef
func Scalef(x, y, z float64)

// Multiply the current matrix by another matrix
//gx:extern rl::rlMultMatrixf
func MultMatrixf(matf *float64)

//gx:extern rl::rlFrustum
func Frustum(left, right, bottom, top, znear, zfar float64)

//gx:extern rl::rlOrtho
func Ortho(left, right, bottom, top, znear, zfar float64)

// Set the viewport area
//gx:extern rl::rlViewport
func Viewport(x, y, width, height int)

// Get internal modelview matrix
//gx:extern rl::rlGetMatrixModelview
func GetMatrixModelview() Matrix

// Initialize drawing mode (how to organize vertex)
//gx:extern rl::rlBegin
func Begin(mode int)

// Finish vertex providing
//gx:extern rl::rlEnd
func End()

// Define one vertex (position) - 2 float
//gx:extern rl::rlVertex2f
func Vertex2f(x, y float64)

// Define one vertex (texture coordinate) - 2 float
//gx:extern rl::rlTexCoord2f
func TexCoord2f(x, y float64)

// Define one vertex (color) - 4 byte
//gx:extern rl::rlColor4ub
func Color4ub(r, g, b, a byte)

// Check internal buffer overflow for a given number of vertex
//gx:extern rl::rlCheckRenderBatchLimit
func CheckRenderBatchLimit(vCount int)

// Set current texture for render batch and check buffers limits
//gx:extern rl::rlSetTexture
func SetTexture(id uint)
