// Generated by ./generator/generator.go
//gx:externs rl::

package rl

import (
	. "github.com/nikki93/dream-hotel/core/geom"
)

// Color, 4 components, R8G8B8A8 (32bit)
type Color struct {
	R byte // Color red value
	G byte // Color green value
	B byte // Color blue value
	A byte // Color alpha value
}

// Rectangle, 4 components
type Rectangle struct {
	X      float64 // Rectangle top-left corner position x
	Y      float64 // Rectangle top-left corner position y
	Width  float64 // Rectangle width
	Height float64 // Rectangle height
}

// Image, pixel data stored in CPU memory (RAM)
type Image struct {
	Data    *byte // Image raw data
	Width   int   // Image base width
	Height  int   // Image base height
	Mipmaps int   // Mipmap levels, 1 by default
	Format  int   // Data format (PixelFormat type)
}

// Texture, tex data stored in GPU memory (VRAM)
type Texture struct {
	Id      uint // OpenGL texture id
	Width   int  // Texture base width
	Height  int  // Texture base height
	Mipmaps int  // Mipmap levels, 1 by default
	Format  int  // Data format (PixelFormat type)
}

// RenderTexture, fbo for texture rendering
type RenderTexture struct {
	Id      uint    // OpenGL framebuffer object id
	Texture Texture // Color buffer attachment texture
	Depth   Texture // Depth buffer attachment texture
}

// NPatchInfo, n-patch layout info
type NPatchInfo struct {
	Source Rectangle // Texture source rectangle
	Left   int       // Left border offset
	Top    int       // Top border offset
	Right  int       // Right border offset
	Bottom int       // Bottom border offset
	Layout int       // Layout of the n-patch: 3x3, 1x3 or 3x1
}

// GlyphInfo, font characters glyphs info
type GlyphInfo struct {
	Value    int   // Character value (Unicode)
	OffsetX  int   // Character offset X when drawing
	OffsetY  int   // Character offset Y when drawing
	AdvanceX int   // Character advance position X
	Image    Image // Character image data
}

// Font, font texture and GlyphInfo array data
type Font struct {
	BaseSize     int        // Base size (default chars height)
	GlyphCount   int        // Number of glyph characters
	GlyphPadding int        // Padding around the glyph characters
	Texture      Texture    // Texture atlas containing the glyphs
	Recs         *Rectangle // Rectangles in texture for the glyphs
	Glyphs       *GlyphInfo // Glyphs info data
}

// Camera, defines position/orientation in 3d space
type Camera3D struct {
	Position   Vec3    // Camera position
	Target     Vec3    // Camera target it looks-at
	Up         Vec3    // Camera up vector (rotation over its axis)
	Fovy       float64 // Camera field-of-view apperture in Y (degrees) in perspective, used as near plane width in orthographic
	Projection int     // Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
}

// Camera2D, defines position/orientation in 2d space
type Camera2D struct {
	Offset   Vec2    // Camera offset (displacement from target)
	Target   Vec2    // Camera target (rotation and zoom origin)
	Rotation float64 // Camera rotation in degrees
	Zoom     float64 // Camera zoom (scaling), should be 1.0f by default
}

// Mesh, vertex data and vao/vbo
type Mesh struct {
	VertexCount   int      // Number of vertices stored in arrays
	TriangleCount int      // Number of triangles stored (indexed or not)
	Vertices      *float64 // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
	Texcoords     *float64 // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
	Texcoords2    *float64 // Vertex second texture coordinates (useful for lightmaps) (shader-location = 5)
	Normals       *float64 // Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
	Tangents      *float64 // Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
	Colors        *byte    // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
	Indices       *uint16  // Vertex indices (in case vertex data comes indexed)
	AnimVertices  *float64 // Animated vertex positions (after bones transformations)
	AnimNormals   *float64 // Animated normals (after bones transformations)
	BoneIds       *byte    // Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
	BoneWeights   *float64 // Vertex bone weight, up to 4 bones influence by vertex (skinning)
	VaoId         uint     // OpenGL Vertex Array Object id
	VboId         *uint    // OpenGL Vertex Buffer Objects id (default vertex data)
}

// Shader
type Shader struct {
	Id   uint // Shader program id
	Locs *int // Shader locations array (RL_MAX_SHADER_LOCATIONS)
}

// MaterialMap
type MaterialMap struct {
	Texture Texture // Material map texture
	Color   Color   // Material map color
	Value   float64 // Material map value
}

// Material, includes shader and maps
type Material struct {
	Shader Shader       // Material shader
	Maps   *MaterialMap // Material maps array (MAX_MATERIAL_MAPS)
	Params [4]float64   // Material generic parameters (if required)
}

// Transform, vectex transformation data
type Transform struct {
	Translation Vec3       // Translation
	Rotation    Quaternion // Rotation
	Scale       Vec3       // Scale
}

// Bone, skeletal animation bone
type BoneInfo struct {
	Name   [32]byte // Bone name
	Parent int      // Bone parent
}

// Model, meshes, materials and animation data
type Model struct {
	Transform     Matrix     // Local transform matrix
	MeshCount     int        // Number of meshes
	MaterialCount int        // Number of materials
	Meshes        *Mesh      // Meshes array
	Materials     *Material  // Materials array
	MeshMaterial  *int       // Mesh material number
	BoneCount     int        // Number of bones
	Bones         *BoneInfo  // Bones information (skeleton)
	BindPose      *Transform // Bones base transformation (pose)
}

// ModelAnimation
type ModelAnimation struct {
	BoneCount  int         // Number of bones
	FrameCount int         // Number of animation frames
	Bones      *BoneInfo   // Bones information (skeleton)
	FramePoses **Transform // Poses array by frame
}

// Ray, ray for raycasting
type Ray struct {
	Position  Vec3 // Ray position (origin)
	Direction Vec3 // Ray direction
}

// RayCollision, ray hit information
type RayCollision struct {
	Hit      bool    // Did the ray hit something?
	Distance float64 // Distance to nearest hit
	Point    Vec3    // Point of nearest hit
	Normal   Vec3    // Surface normal of hit
}

// BoundingBox
type BoundingBox struct {
	Min Vec3 // Minimum vertex box-corner
	Max Vec3 // Maximum vertex box-corner
}

// Wave, audio wave data
type Wave struct {
	FrameCount uint  // Total number of frames (considering channels)
	SampleRate uint  // Frequency (samples per second)
	SampleSize uint  // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
	Channels   uint  // Number of channels (1-mono, 2-stereo, ...)
	Data       *byte // Buffer data pointer
}

// AudioStream, custom audio stream
type AudioStream struct {
	SampleRate uint // Frequency (samples per second)
	SampleSize uint // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
	Channels   uint // Number of channels (1-mono, 2-stereo, ...)
}

// Sound
type Sound struct {
	Stream     AudioStream // Audio stream
	FrameCount uint        // Total number of frames (considering channels)
}

// Music, audio stream, anything longer than ~10 seconds should be streamed
type Music struct {
	Stream     AudioStream // Audio stream
	FrameCount uint        // Total number of frames (considering channels)
	Looping    bool        // Music looping enable
	CtxType    int         // Type of music context (audio filetype)
	CtxData    *byte       // Audio context data, depends on type
}

// VrDeviceInfo, Head-Mounted-Display device parameters
type VrDeviceInfo struct {
	HResolution            int        // Horizontal resolution in pixels
	VResolution            int        // Vertical resolution in pixels
	HScreenSize            float64    // Horizontal size in meters
	VScreenSize            float64    // Vertical size in meters
	VScreenCenter          float64    // Screen center in meters
	EyeToScreenDistance    float64    // Distance between eye and display in meters
	LensSeparationDistance float64    // Lens separation distance in meters
	InterpupillaryDistance float64    // IPD (distance between pupils) in meters
	LensDistortionValues   [4]float64 // Lens distortion constant parameters
	ChromaAbCorrection     [4]float64 // Chromatic aberration correction parameters
}

// VrStereoConfig, VR stereo rendering configuration for simulator
type VrStereoConfig struct {
	Projection        [2]Matrix  // VR projection matrices (per eye)
	ViewOffset        [2]Matrix  // VR view offset matrices (per eye)
	LeftLensCenter    [2]float64 // VR left lens center
	RightLensCenter   [2]float64 // VR right lens center
	LeftScreenCenter  [2]float64 // VR left screen center
	RightScreenCenter [2]float64 // VR right screen center
	Scale             [2]float64 // VR distortion scale
	ScaleIn           [2]float64 // VR distortion scale in
}

// System/Window config flags
const (
	FLAG_VSYNC_HINT         = 64
	FLAG_FULLSCREEN_MODE    = 2
	FLAG_WINDOW_RESIZABLE   = 4
	FLAG_WINDOW_UNDECORATED = 8
	FLAG_WINDOW_HIDDEN      = 128
	FLAG_WINDOW_MINIMIZED   = 512
	FLAG_WINDOW_MAXIMIZED   = 1024
	FLAG_WINDOW_UNFOCUSED   = 2048
	FLAG_WINDOW_TOPMOST     = 4096
	FLAG_WINDOW_ALWAYS_RUN  = 256
	FLAG_WINDOW_TRANSPARENT = 16
	FLAG_WINDOW_HIGHDPI     = 8192
	FLAG_MSAA_4X_HINT       = 32
	FLAG_INTERLACED_HINT    = 65536
)

// Trace log level
const (
	LOG_ALL     = 0
	LOG_TRACE   = 1
	LOG_DEBUG   = 2
	LOG_INFO    = 3
	LOG_WARNING = 4
	LOG_ERROR   = 5
	LOG_FATAL   = 6
	LOG_NONE    = 7
)

// Keyboard keys (US keyboard layout)
const (
	KEY_NULL          = 0
	KEY_APOSTROPHE    = 39
	KEY_COMMA         = 44
	KEY_MINUS         = 45
	KEY_PERIOD        = 46
	KEY_SLASH         = 47
	KEY_ZERO          = 48
	KEY_ONE           = 49
	KEY_TWO           = 50
	KEY_THREE         = 51
	KEY_FOUR          = 52
	KEY_FIVE          = 53
	KEY_SIX           = 54
	KEY_SEVEN         = 55
	KEY_EIGHT         = 56
	KEY_NINE          = 57
	KEY_SEMICOLON     = 59
	KEY_EQUAL         = 61
	KEY_A             = 65
	KEY_B             = 66
	KEY_C             = 67
	KEY_D             = 68
	KEY_E             = 69
	KEY_F             = 70
	KEY_G             = 71
	KEY_H             = 72
	KEY_I             = 73
	KEY_J             = 74
	KEY_K             = 75
	KEY_L             = 76
	KEY_M             = 77
	KEY_N             = 78
	KEY_O             = 79
	KEY_P             = 80
	KEY_Q             = 81
	KEY_R             = 82
	KEY_S             = 83
	KEY_T             = 84
	KEY_U             = 85
	KEY_V             = 86
	KEY_W             = 87
	KEY_X             = 88
	KEY_Y             = 89
	KEY_Z             = 90
	KEY_LEFT_BRACKET  = 91
	KEY_BACKSLASH     = 92
	KEY_RIGHT_BRACKET = 93
	KEY_GRAVE         = 96
	KEY_SPACE         = 32
	KEY_ESCAPE        = 256
	KEY_ENTER         = 257
	KEY_TAB           = 258
	KEY_BACKSPACE     = 259
	KEY_INSERT        = 260
	KEY_DELETE        = 261
	KEY_RIGHT         = 262
	KEY_LEFT          = 263
	KEY_DOWN          = 264
	KEY_UP            = 265
	KEY_PAGE_UP       = 266
	KEY_PAGE_DOWN     = 267
	KEY_HOME          = 268
	KEY_END           = 269
	KEY_CAPS_LOCK     = 280
	KEY_SCROLL_LOCK   = 281
	KEY_NUM_LOCK      = 282
	KEY_PRINT_SCREEN  = 283
	KEY_PAUSE         = 284
	KEY_F1            = 290
	KEY_F2            = 291
	KEY_F3            = 292
	KEY_F4            = 293
	KEY_F5            = 294
	KEY_F6            = 295
	KEY_F7            = 296
	KEY_F8            = 297
	KEY_F9            = 298
	KEY_F10           = 299
	KEY_F11           = 300
	KEY_F12           = 301
	KEY_LEFT_SHIFT    = 340
	KEY_LEFT_CONTROL  = 341
	KEY_LEFT_ALT      = 342
	KEY_LEFT_SUPER    = 343
	KEY_RIGHT_SHIFT   = 344
	KEY_RIGHT_CONTROL = 345
	KEY_RIGHT_ALT     = 346
	KEY_RIGHT_SUPER   = 347
	KEY_KB_MENU       = 348
	KEY_KP_0          = 320
	KEY_KP_1          = 321
	KEY_KP_2          = 322
	KEY_KP_3          = 323
	KEY_KP_4          = 324
	KEY_KP_5          = 325
	KEY_KP_6          = 326
	KEY_KP_7          = 327
	KEY_KP_8          = 328
	KEY_KP_9          = 329
	KEY_KP_DECIMAL    = 330
	KEY_KP_DIVIDE     = 331
	KEY_KP_MULTIPLY   = 332
	KEY_KP_SUBTRACT   = 333
	KEY_KP_ADD        = 334
	KEY_KP_ENTER      = 335
	KEY_KP_EQUAL      = 336
	KEY_BACK          = 4
	KEY_MENU          = 82
	KEY_VOLUME_UP     = 24
	KEY_VOLUME_DOWN   = 25
)

// Mouse buttons
const (
	MOUSE_BUTTON_LEFT    = 0
	MOUSE_BUTTON_RIGHT   = 1
	MOUSE_BUTTON_MIDDLE  = 2
	MOUSE_BUTTON_SIDE    = 3
	MOUSE_BUTTON_EXTRA   = 4
	MOUSE_BUTTON_FORWARD = 5
	MOUSE_BUTTON_BACK    = 6
)

// Mouse cursor
const (
	MOUSE_CURSOR_DEFAULT       = 0
	MOUSE_CURSOR_ARROW         = 1
	MOUSE_CURSOR_IBEAM         = 2
	MOUSE_CURSOR_CROSSHAIR     = 3
	MOUSE_CURSOR_POINTING_HAND = 4
	MOUSE_CURSOR_RESIZE_EW     = 5
	MOUSE_CURSOR_RESIZE_NS     = 6
	MOUSE_CURSOR_RESIZE_NWSE   = 7
	MOUSE_CURSOR_RESIZE_NESW   = 8
	MOUSE_CURSOR_RESIZE_ALL    = 9
	MOUSE_CURSOR_NOT_ALLOWED   = 10
)

// Gamepad buttons
const (
	GAMEPAD_BUTTON_UNKNOWN          = 0
	GAMEPAD_BUTTON_LEFT_FACE_UP     = 1
	GAMEPAD_BUTTON_LEFT_FACE_RIGHT  = 2
	GAMEPAD_BUTTON_LEFT_FACE_DOWN   = 3
	GAMEPAD_BUTTON_LEFT_FACE_LEFT   = 4
	GAMEPAD_BUTTON_RIGHT_FACE_UP    = 5
	GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6
	GAMEPAD_BUTTON_RIGHT_FACE_DOWN  = 7
	GAMEPAD_BUTTON_RIGHT_FACE_LEFT  = 8
	GAMEPAD_BUTTON_LEFT_TRIGGER_1   = 9
	GAMEPAD_BUTTON_LEFT_TRIGGER_2   = 10
	GAMEPAD_BUTTON_RIGHT_TRIGGER_1  = 11
	GAMEPAD_BUTTON_RIGHT_TRIGGER_2  = 12
	GAMEPAD_BUTTON_MIDDLE_LEFT      = 13
	GAMEPAD_BUTTON_MIDDLE           = 14
	GAMEPAD_BUTTON_MIDDLE_RIGHT     = 15
	GAMEPAD_BUTTON_LEFT_THUMB       = 16
	GAMEPAD_BUTTON_RIGHT_THUMB      = 17
)

// Gamepad axis
const (
	GAMEPAD_AXIS_LEFT_X        = 0
	GAMEPAD_AXIS_LEFT_Y        = 1
	GAMEPAD_AXIS_RIGHT_X       = 2
	GAMEPAD_AXIS_RIGHT_Y       = 3
	GAMEPAD_AXIS_LEFT_TRIGGER  = 4
	GAMEPAD_AXIS_RIGHT_TRIGGER = 5
)

// Material map index
const (
	MATERIAL_MAP_ALBEDO     = 0
	MATERIAL_MAP_METALNESS  = 1
	MATERIAL_MAP_NORMAL     = 2
	MATERIAL_MAP_ROUGHNESS  = 3
	MATERIAL_MAP_OCCLUSION  = 4
	MATERIAL_MAP_EMISSION   = 5
	MATERIAL_MAP_HEIGHT     = 6
	MATERIAL_MAP_CUBEMAP    = 7
	MATERIAL_MAP_IRRADIANCE = 8
	MATERIAL_MAP_PREFILTER  = 9
	MATERIAL_MAP_BRDF       = 10
)

// Shader location index
const (
	SHADER_LOC_VERTEX_POSITION   = 0
	SHADER_LOC_VERTEX_TEXCOORD01 = 1
	SHADER_LOC_VERTEX_TEXCOORD02 = 2
	SHADER_LOC_VERTEX_NORMAL     = 3
	SHADER_LOC_VERTEX_TANGENT    = 4
	SHADER_LOC_VERTEX_COLOR      = 5
	SHADER_LOC_MATRIX_MVP        = 6
	SHADER_LOC_MATRIX_VIEW       = 7
	SHADER_LOC_MATRIX_PROJECTION = 8
	SHADER_LOC_MATRIX_MODEL      = 9
	SHADER_LOC_MATRIX_NORMAL     = 10
	SHADER_LOC_VECTOR_VIEW       = 11
	SHADER_LOC_COLOR_DIFFUSE     = 12
	SHADER_LOC_COLOR_SPECULAR    = 13
	SHADER_LOC_COLOR_AMBIENT     = 14
	SHADER_LOC_MAP_ALBEDO        = 15
	SHADER_LOC_MAP_METALNESS     = 16
	SHADER_LOC_MAP_NORMAL        = 17
	SHADER_LOC_MAP_ROUGHNESS     = 18
	SHADER_LOC_MAP_OCCLUSION     = 19
	SHADER_LOC_MAP_EMISSION      = 20
	SHADER_LOC_MAP_HEIGHT        = 21
	SHADER_LOC_MAP_CUBEMAP       = 22
	SHADER_LOC_MAP_IRRADIANCE    = 23
	SHADER_LOC_MAP_PREFILTER     = 24
	SHADER_LOC_MAP_BRDF          = 25
)

// Shader uniform data type
const (
	SHADER_UNIFORM_FLOAT     = 0
	SHADER_UNIFORM_VEC2      = 1
	SHADER_UNIFORM_VEC3      = 2
	SHADER_UNIFORM_VEC4      = 3
	SHADER_UNIFORM_INT       = 4
	SHADER_UNIFORM_IVEC2     = 5
	SHADER_UNIFORM_IVEC3     = 6
	SHADER_UNIFORM_IVEC4     = 7
	SHADER_UNIFORM_SAMPLER2D = 8
)

// Shader attribute data types
const (
	SHADER_ATTRIB_FLOAT = 0
	SHADER_ATTRIB_VEC2  = 1
	SHADER_ATTRIB_VEC3  = 2
	SHADER_ATTRIB_VEC4  = 3
)

// Pixel formats
const (
	PIXELFORMAT_UNCOMPRESSED_GRAYSCALE    = 1
	PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   = 2
	PIXELFORMAT_UNCOMPRESSED_R5G6B5       = 3
	PIXELFORMAT_UNCOMPRESSED_R8G8B8       = 4
	PIXELFORMAT_UNCOMPRESSED_R5G5B5A1     = 5
	PIXELFORMAT_UNCOMPRESSED_R4G4B4A4     = 6
	PIXELFORMAT_UNCOMPRESSED_R8G8B8A8     = 7
	PIXELFORMAT_UNCOMPRESSED_R32          = 8
	PIXELFORMAT_UNCOMPRESSED_R32G32B32    = 9
	PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10
	PIXELFORMAT_COMPRESSED_DXT1_RGB       = 11
	PIXELFORMAT_COMPRESSED_DXT1_RGBA      = 12
	PIXELFORMAT_COMPRESSED_DXT3_RGBA      = 13
	PIXELFORMAT_COMPRESSED_DXT5_RGBA      = 14
	PIXELFORMAT_COMPRESSED_ETC1_RGB       = 15
	PIXELFORMAT_COMPRESSED_ETC2_RGB       = 16
	PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  = 17
	PIXELFORMAT_COMPRESSED_PVRT_RGB       = 18
	PIXELFORMAT_COMPRESSED_PVRT_RGBA      = 19
	PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  = 20
	PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  = 21
)

// Texture parameters: filter mode
const (
	TEXTURE_FILTER_POINT           = 0
	TEXTURE_FILTER_BILINEAR        = 1
	TEXTURE_FILTER_TRILINEAR       = 2
	TEXTURE_FILTER_ANISOTROPIC_4X  = 3
	TEXTURE_FILTER_ANISOTROPIC_8X  = 4
	TEXTURE_FILTER_ANISOTROPIC_16X = 5
)

// Texture parameters: wrap mode
const (
	TEXTURE_WRAP_REPEAT        = 0
	TEXTURE_WRAP_CLAMP         = 1
	TEXTURE_WRAP_MIRROR_REPEAT = 2
	TEXTURE_WRAP_MIRROR_CLAMP  = 3
)

// Cubemap layouts
const (
	CUBEMAP_LAYOUT_AUTO_DETECT         = 0
	CUBEMAP_LAYOUT_LINE_VERTICAL       = 1
	CUBEMAP_LAYOUT_LINE_HORIZONTAL     = 2
	CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3
	CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4
	CUBEMAP_LAYOUT_PANORAMA            = 5
)

// Font type, defines generation method
const (
	FONT_DEFAULT = 0
	FONT_BITMAP  = 1
	FONT_SDF     = 2
)

// Color blending modes (pre-defined)
const (
	BLEND_ALPHA           = 0
	BLEND_ADDITIVE        = 1
	BLEND_MULTIPLIED      = 2
	BLEND_ADD_COLORS      = 3
	BLEND_SUBTRACT_COLORS = 4
	BLEND_CUSTOM          = 5
)

// Gesture
const (
	GESTURE_NONE        = 0
	GESTURE_TAP         = 1
	GESTURE_DOUBLETAP   = 2
	GESTURE_HOLD        = 4
	GESTURE_DRAG        = 8
	GESTURE_SWIPE_RIGHT = 16
	GESTURE_SWIPE_LEFT  = 32
	GESTURE_SWIPE_UP    = 64
	GESTURE_SWIPE_DOWN  = 128
	GESTURE_PINCH_IN    = 256
	GESTURE_PINCH_OUT   = 512
)

// Camera system modes
const (
	CAMERA_CUSTOM       = 0
	CAMERA_FREE         = 1
	CAMERA_ORBITAL      = 2
	CAMERA_FIRST_PERSON = 3
	CAMERA_THIRD_PERSON = 4
)

// Camera projection
const (
	CAMERA_PERSPECTIVE  = 0
	CAMERA_ORTHOGRAPHIC = 1
)

// N-patch layout
const (
	NPATCH_NINE_PATCH             = 0
	NPATCH_THREE_PATCH_VERTICAL   = 1
	NPATCH_THREE_PATCH_HORIZONTAL = 2
)

// Initialize window and OpenGL context
func InitWindow(width int, height int, title string)

// Check if KEY_ESCAPE pressed or Close icon pressed
func WindowShouldClose() bool

// Close window and unload OpenGL context
func CloseWindow()

// Check if window has been initialized successfully
func IsWindowReady() bool

// Check if window is currently fullscreen
func IsWindowFullscreen() bool

// Check if window is currently hidden (only PLATFORM_DESKTOP)
func IsWindowHidden() bool

// Check if window is currently minimized (only PLATFORM_DESKTOP)
func IsWindowMinimized() bool

// Check if window is currently maximized (only PLATFORM_DESKTOP)
func IsWindowMaximized() bool

// Check if window is currently focused (only PLATFORM_DESKTOP)
func IsWindowFocused() bool

// Check if window has been resized last frame
func IsWindowResized() bool

// Check if one specific window flag is enabled
func IsWindowState(flag uint) bool

// Set window configuration state using flags (only PLATFORM_DESKTOP)
func SetWindowState(flags uint)

// Clear window configuration state flags
func ClearWindowState(flags uint)

// Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
func ToggleFullscreen()

// Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
func MaximizeWindow()

// Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
func MinimizeWindow()

// Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
func RestoreWindow()

// Set icon for window (only PLATFORM_DESKTOP)
func SetWindowIcon(image Image)

// Set title for window (only PLATFORM_DESKTOP)
func SetWindowTitle(title string)

// Set window position on screen (only PLATFORM_DESKTOP)
func SetWindowPosition(x int, y int)

// Set monitor for the current window (fullscreen mode)
func SetWindowMonitor(monitor int)

// Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
func SetWindowMinSize(width int, height int)

// Set window dimensions
func SetWindowSize(width int, height int)

// Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
func SetWindowOpacity(opacity float64)

// Get native window handle
func GetWindowHandle() *byte

// Get current screen width
func GetScreenWidth() int

// Get current screen height
func GetScreenHeight() int

// Get current render width (it considers HiDPI)
func GetRenderWidth() int

// Get current render height (it considers HiDPI)
func GetRenderHeight() int

// Get number of connected monitors
func GetMonitorCount() int

// Get current connected monitor
func GetCurrentMonitor() int

// Get specified monitor position
func GetMonitorPosition(monitor int) Vec2

// Get specified monitor width (max available by monitor)
func GetMonitorWidth(monitor int) int

// Get specified monitor height (max available by monitor)
func GetMonitorHeight(monitor int) int

// Get specified monitor physical width in millimetres
func GetMonitorPhysicalWidth(monitor int) int

// Get specified monitor physical height in millimetres
func GetMonitorPhysicalHeight(monitor int) int

// Get specified monitor refresh rate
func GetMonitorRefreshRate(monitor int) int

// Get window position XY on monitor
func GetWindowPosition() Vec2

// Get window scale DPI factor
func GetWindowScaleDPI() Vec2

// Get the human-readable, UTF-8 encoded name of the primary monitor
func GetMonitorName(monitor int) string

// Set clipboard text content
func SetClipboardText(text string)

// Get clipboard text content
func GetClipboardText() string

// Swap back buffer with front buffer (screen drawing)
func SwapScreenBuffer()

// Register all input events
func PollInputEvents()

// Wait for some milliseconds (halt program execution)
func WaitTime(ms float64)

// Shows cursor
func ShowCursor()

// Hides cursor
func HideCursor()

// Check if cursor is not visible
func IsCursorHidden() bool

// Enables cursor (unlock cursor)
func EnableCursor()

// Disables cursor (lock cursor)
func DisableCursor()

// Check if cursor is on the screen
func IsCursorOnScreen() bool

// Set background color (framebuffer clear color)
func ClearBackground(color Color)

// Setup canvas (framebuffer) to start drawing
func BeginDrawing()

// End canvas drawing and swap buffers (double buffering)
func EndDrawing()

// Begin 2D mode with custom camera (2D)
func BeginMode2D(camera Camera2D)

// Ends 2D mode with custom camera
func EndMode2D()

// Begin 3D mode with custom camera (3D)
func BeginMode3D(camera Camera3D)

// Ends 3D mode and returns to default 2D orthographic mode
func EndMode3D()

// Begin drawing to render texture
func BeginTextureMode(target RenderTexture2D)

// Ends drawing to render texture
func EndTextureMode()

// Begin custom shader drawing
func BeginShaderMode(shader Shader)

// End custom shader drawing (use default shader)
func EndShaderMode()

// Begin blending mode (alpha, additive, multiplied, subtract, custom)
func BeginBlendMode(mode int)

// End blending mode (reset to default: alpha blending)
func EndBlendMode()

// Begin scissor mode (define screen area for following drawing)
func BeginScissorMode(x int, y int, width int, height int)

// End scissor mode
func EndScissorMode()

// Begin stereo rendering (requires VR simulator)
func BeginVrStereoMode(config VrStereoConfig)

// End stereo rendering (requires VR simulator)
func EndVrStereoMode()

// Load VR stereo config for VR simulator device parameters
func LoadVrStereoConfig(device VrDeviceInfo) VrStereoConfig

// Unload VR stereo config
func UnloadVrStereoConfig(config VrStereoConfig)

// Load shader from files and bind default locations
func LoadShader(vsFileName string, fsFileName string) Shader

// Load shader from code strings and bind default locations
func LoadShaderFromMemory(vsCode string, fsCode string) Shader

// Get shader uniform location
func GetShaderLocation(shader Shader, uniformName string) int

// Get shader attribute location
func GetShaderLocationAttrib(shader Shader, attribName string) int

// Set shader uniform value
func SetShaderValue(shader Shader, locIndex int, value *float64, uniformType int)

// Set shader uniform value vector
func SetShaderValueV(shader Shader, locIndex int, value *byte, uniformType int, count int)

// Set shader uniform value (matrix 4x4)
func SetShaderValueMatrix(shader Shader, locIndex int, mat Matrix)

// Set shader uniform value for texture (sampler2d)
func SetShaderValueTexture(shader Shader, locIndex int, texture Texture)

// Unload shader from GPU memory (VRAM)
func UnloadShader(shader Shader)

// Get a ray trace from mouse position
func GetMouseRay(mousePosition Vec2, camera Camera) Ray

// Get camera transform matrix (view matrix)
func GetCameraMatrix(camera Camera) Matrix

// Get camera 2d transform matrix
func GetCameraMatrix2D(camera Camera2D) Matrix

// Get the screen space position for a 3d world space position
func GetWorldToScreen(position Vec3, camera Camera) Vec2

// Get size position for a 3d world space position
func GetWorldToScreenEx(position Vec3, camera Camera, width int, height int) Vec2

// Get the screen space position for a 2d camera world space position
func GetWorldToScreen2D(position Vec2, camera Camera2D) Vec2

// Get the world space position for a 2d camera screen space position
func GetScreenToWorld2D(position Vec2, camera Camera2D) Vec2

// Set target FPS (maximum)
func SetTargetFPS(fps int)

// Get current FPS
func GetFPS() int

// Get time in seconds for last frame drawn (delta time)
func GetFrameTime() float64

// Get elapsed time in seconds since InitWindow()
func GetTime() float64

// Get a random value between min and max (both included)
func GetRandomValue(min int, max int) int

// Set the seed for the random number generator
func SetRandomSeed(seed uint)

// Takes a screenshot of current screen (filename extension defines format)
func TakeScreenshot(fileName string)

// Setup init configuration flags (view FLAGS)
func SetConfigFlags(flags uint)

// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
func TraceLog(logLevel int, text string, args ...interface{})

// Set the current threshold (minimum) log level
func SetTraceLogLevel(logLevel int)

// Internal memory allocator
func MemAlloc(size int) *byte

// Internal memory reallocator
func MemRealloc(ptr *byte, size int) *byte

// Internal memory free
func MemFree(ptr *byte)

// Load file data as byte array (read)
func LoadFileData(fileName string, bytesRead *uint) *byte

// Unload file data allocated by LoadFileData()
func UnloadFileData(data *byte)

// Save data to file from byte array (write), returns true on success
func SaveFileData(fileName string, data *byte, bytesToWrite uint) bool

// Load text data from file (read), returns a '\0' terminated string
func LoadFileText(fileName string) *byte

// Unload file text data allocated by LoadFileText()
func UnloadFileText(text *byte)

// Save text data to file (write), string must be '\0' terminated, returns true on success
func SaveFileText(fileName string, text *byte) bool

// Check if file exists
func FileExists(fileName string) bool

// Check if a directory path exists
func DirectoryExists(dirPath string) bool

// Check file extension (including point: .png, .wav)
func IsFileExtension(fileName string, ext string) bool

// Get pointer to extension for a filename string (includes dot: '.png')
func GetFileExtension(fileName string) string

// Get pointer to filename for a path string
func GetFileName(filePath string) string

// Get filename string without extension (uses static string)
func GetFileNameWithoutExt(filePath string) string

// Get full path for a given fileName with path (uses static string)
func GetDirectoryPath(filePath string) string

// Get previous directory path for a given path (uses static string)
func GetPrevDirectoryPath(dirPath string) string

// Get current working directory (uses static string)
func GetWorkingDirectory() string

// Get filenames in a directory path (memory should be freed)
func GetDirectoryFiles(dirPath string, count *int) **byte

// Clear directory files paths buffers (free memory)
func ClearDirectoryFiles()

// Change working directory, return true on success
func ChangeDirectory(dir string) bool

// Check if a file has been dropped into window
func IsFileDropped() bool

// Get dropped files names (memory should be freed)
func GetDroppedFiles(count *int) **byte

// Clear dropped files paths buffer (free memory)
func ClearDroppedFiles()

// Get file modification time (last write time)
func GetFileModTime(fileName string) int64

// Compress data (DEFLATE algorithm)
func CompressData(data *byte, dataLength int, compDataLength *int) *byte

// Decompress data (DEFLATE algorithm)
func DecompressData(compData *byte, compDataLength int, dataLength *int) *byte

// Encode data to Base64 string
func EncodeDataBase64(data *byte, dataLength int, outputLength *int) *byte

// Decode Base64 string data
func DecodeDataBase64(data *byte, outputLength *int) *byte

// Save integer value to storage file (to defined position), returns true on success
func SaveStorageValue(position uint, value int) bool

// Load integer value from storage file (from defined position)
func LoadStorageValue(position uint) int

// Open URL with default system browser (if available)
func OpenURL(url string)

// Check if a key has been pressed once
func IsKeyPressed(key int) bool

// Check if a key is being pressed
func IsKeyDown(key int) bool

// Check if a key has been released once
func IsKeyReleased(key int) bool

// Check if a key is NOT being pressed
func IsKeyUp(key int) bool

// Set a custom key to exit program (default is ESC)
func SetExitKey(key int)

// Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
func GetKeyPressed() int

// Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
func GetCharPressed() int

// Check if a gamepad is available
func IsGamepadAvailable(gamepad int) bool

// Get gamepad internal name id
func GetGamepadName(gamepad int) string

// Check if a gamepad button has been pressed once
func IsGamepadButtonPressed(gamepad int, button int) bool

// Check if a gamepad button is being pressed
func IsGamepadButtonDown(gamepad int, button int) bool

// Check if a gamepad button has been released once
func IsGamepadButtonReleased(gamepad int, button int) bool

// Check if a gamepad button is NOT being pressed
func IsGamepadButtonUp(gamepad int, button int) bool

// Get the last gamepad button pressed
func GetGamepadButtonPressed() int

// Get gamepad axis count for a gamepad
func GetGamepadAxisCount(gamepad int) int

// Get axis movement value for a gamepad axis
func GetGamepadAxisMovement(gamepad int, axis int) float64

// Set internal gamepad mappings (SDL_GameControllerDB)
func SetGamepadMappings(mappings string) int

// Check if a mouse button has been pressed once
func IsMouseButtonPressed(button int) bool

// Check if a mouse button is being pressed
func IsMouseButtonDown(button int) bool

// Check if a mouse button has been released once
func IsMouseButtonReleased(button int) bool

// Check if a mouse button is NOT being pressed
func IsMouseButtonUp(button int) bool

// Get mouse position X
func GetMouseX() int

// Get mouse position Y
func GetMouseY() int

// Get mouse position XY
func GetMousePosition() Vec2

// Get mouse delta between frames
func GetMouseDelta() Vec2

// Set mouse position XY
func SetMousePosition(x int, y int)

// Set mouse offset
func SetMouseOffset(offsetX int, offsetY int)

// Set mouse scaling
func SetMouseScale(scaleX float64, scaleY float64)

// Get mouse wheel movement Y
func GetMouseWheelMove() float64

// Set mouse cursor
func SetMouseCursor(cursor int)

// Get touch position X for touch point 0 (relative to screen size)
func GetTouchX() int

// Get touch position Y for touch point 0 (relative to screen size)
func GetTouchY() int

// Get touch position XY for a touch point index (relative to screen size)
func GetTouchPosition(index int) Vec2

// Get touch point identifier for given index
func GetTouchPointId(index int) int

// Get number of touch points
func GetTouchPointCount() int

// Enable a set of gestures using flags
func SetGesturesEnabled(flags uint)

// Check if a gesture have been detected
func IsGestureDetected(gesture int) bool

// Get latest detected gesture
func GetGestureDetected() int

// Get gesture hold time in milliseconds
func GetGestureHoldDuration() float64

// Get gesture drag vector
func GetGestureDragVector() Vec2

// Get gesture drag angle
func GetGestureDragAngle() float64

// Get gesture pinch delta
func GetGesturePinchVector() Vec2

// Get gesture pinch angle
func GetGesturePinchAngle() float64

// Set camera mode (multiple camera modes available)
func SetCameraMode(camera Camera, mode int)

// Update camera position for selected mode
func UpdateCamera(camera *Camera)

// Set camera pan key to combine with mouse movement (free camera)
func SetCameraPanControl(keyPan int)

// Set camera alt key to combine with mouse movement (free camera)
func SetCameraAltControl(keyAlt int)

// Set camera smooth zoom key to combine with mouse (free camera)
func SetCameraSmoothZoomControl(keySmoothZoom int)

// Set camera move controls (1st person and 3rd person cameras)
func SetCameraMoveControls(keyFront int, keyBack int, keyRight int, keyLeft int, keyUp int, keyDown int)

// Set texture and rectangle to be used on shapes drawing
func SetShapesTexture(texture Texture, source Rectangle)

// Draw a pixel
func DrawPixel(posX int, posY int, color Color)

// Draw a pixel (Vector version)
func DrawPixelV(position Vec2, color Color)

// Draw a line
func DrawLine(startPosX int, startPosY int, endPosX int, endPosY int, color Color)

// Draw a line (Vector version)
func DrawLineV(startPos Vec2, endPos Vec2, color Color)

// Draw a line defining thickness
func DrawLineEx(startPos Vec2, endPos Vec2, thick float64, color Color)

// Draw a line using cubic-bezier curves in-out
func DrawLineBezier(startPos Vec2, endPos Vec2, thick float64, color Color)

// Draw line using quadratic bezier curves with a control point
func DrawLineBezierQuad(startPos Vec2, endPos Vec2, controlPos Vec2, thick float64, color Color)

// Draw line using cubic bezier curves with 2 control points
func DrawLineBezierCubic(startPos Vec2, endPos Vec2, startControlPos Vec2, endControlPos Vec2, thick float64, color Color)

// Draw lines sequence
func DrawLineStrip(points *Vec2, pointCount int, color Color)

// Draw a color-filled circle
func DrawCircle(centerX int, centerY int, radius float64, color Color)

// Draw a piece of a circle
func DrawCircleSector(center Vec2, radius float64, startAngle float64, endAngle float64, segments int, color Color)

// Draw circle sector outline
func DrawCircleSectorLines(center Vec2, radius float64, startAngle float64, endAngle float64, segments int, color Color)

// Draw a gradient-filled circle
func DrawCircleGradient(centerX int, centerY int, radius float64, color1 Color, color2 Color)

// Draw a color-filled circle (Vector version)
func DrawCircleV(center Vec2, radius float64, color Color)

// Draw circle outline
func DrawCircleLines(centerX int, centerY int, radius float64, color Color)

// Draw ellipse
func DrawEllipse(centerX int, centerY int, radiusH float64, radiusV float64, color Color)

// Draw ellipse outline
func DrawEllipseLines(centerX int, centerY int, radiusH float64, radiusV float64, color Color)

// Draw ring
func DrawRing(center Vec2, innerRadius float64, outerRadius float64, startAngle float64, endAngle float64, segments int, color Color)

// Draw ring outline
func DrawRingLines(center Vec2, innerRadius float64, outerRadius float64, startAngle float64, endAngle float64, segments int, color Color)

// Draw a color-filled rectangle
func DrawRectangle(posX int, posY int, width int, height int, color Color)

// Draw a color-filled rectangle (Vector version)
func DrawRectangleV(position Vec2, size Vec2, color Color)

// Draw a color-filled rectangle
func DrawRectangleRec(rec Rectangle, color Color)

// Draw a color-filled rectangle with pro parameters
func DrawRectanglePro(rec Rectangle, origin Vec2, rotation float64, color Color)

// Draw a vertical-gradient-filled rectangle
func DrawRectangleGradientV(posX int, posY int, width int, height int, color1 Color, color2 Color)

// Draw a horizontal-gradient-filled rectangle
func DrawRectangleGradientH(posX int, posY int, width int, height int, color1 Color, color2 Color)

// Draw a gradient-filled rectangle with custom vertex colors
func DrawRectangleGradientEx(rec Rectangle, col1 Color, col2 Color, col3 Color, col4 Color)

// Draw rectangle outline
func DrawRectangleLines(posX int, posY int, width int, height int, color Color)

// Draw rectangle outline with extended parameters
func DrawRectangleLinesEx(rec Rectangle, lineThick float64, color Color)

// Draw rectangle with rounded edges
func DrawRectangleRounded(rec Rectangle, roundness float64, segments int, color Color)

// Draw rectangle with rounded edges outline
func DrawRectangleRoundedLines(rec Rectangle, roundness float64, segments int, lineThick float64, color Color)

// Draw a color-filled triangle (vertex in counter-clockwise order!)
func DrawTriangle(v1 Vec2, v2 Vec2, v3 Vec2, color Color)

// Draw triangle outline (vertex in counter-clockwise order!)
func DrawTriangleLines(v1 Vec2, v2 Vec2, v3 Vec2, color Color)

// Draw a triangle fan defined by points (first vertex is the center)
func DrawTriangleFan(points *Vec2, pointCount int, color Color)

// Draw a triangle strip defined by points
func DrawTriangleStrip(points *Vec2, pointCount int, color Color)

// Draw a regular polygon (Vector version)
func DrawPoly(center Vec2, sides int, radius float64, rotation float64, color Color)

// Draw a polygon outline of n sides
func DrawPolyLines(center Vec2, sides int, radius float64, rotation float64, color Color)

// Draw a polygon outline of n sides with extended parameters
func DrawPolyLinesEx(center Vec2, sides int, radius float64, rotation float64, lineThick float64, color Color)

// Check collision between two rectangles
func CheckCollisionRecs(rec1 Rectangle, rec2 Rectangle) bool

// Check collision between two circles
func CheckCollisionCircles(center1 Vec2, radius1 float64, center2 Vec2, radius2 float64) bool

// Check collision between circle and rectangle
func CheckCollisionCircleRec(center Vec2, radius float64, rec Rectangle) bool

// Check if point is inside rectangle
func CheckCollisionPointRec(point Vec2, rec Rectangle) bool

// Check if point is inside circle
func CheckCollisionPointCircle(point Vec2, center Vec2, radius float64) bool

// Check if point is inside a triangle
func CheckCollisionPointTriangle(point Vec2, p1 Vec2, p2 Vec2, p3 Vec2) bool

// Check the collision between two lines defined by two points each, returns collision point by reference
func CheckCollisionLines(startPos1 Vec2, endPos1 Vec2, startPos2 Vec2, endPos2 Vec2, collisionPoint *Vec2) bool

// Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
func CheckCollisionPointLine(point Vec2, p1 Vec2, p2 Vec2, threshold int) bool

// Get collision rectangle for two rectangles collision
func GetCollisionRec(rec1 Rectangle, rec2 Rectangle) Rectangle

// Load image from file into CPU memory (RAM)
func LoadImage(fileName string) Image

// Load image from RAW file data
func LoadImageRaw(fileName string, width int, height int, format int, headerSize int) Image

// Load image sequence from file (frames appended to image.data)
func LoadImageAnim(fileName string, frames *int) Image

// Load image from memory buffer, fileType refers to extension: i.e. '.png'
func LoadImageFromMemory(fileType string, fileData *byte, dataSize int) Image

// Load image from GPU texture data
func LoadImageFromTexture(texture Texture) Image

// Load image from screen buffer and (screenshot)
func LoadImageFromScreen() Image

// Unload image from CPU memory (RAM)
func UnloadImage(image Image)

// Export image data to file, returns true on success
func ExportImage(image Image, fileName string) bool

// Export image as code file defining an array of bytes, returns true on success
func ExportImageAsCode(image Image, fileName string) bool

// Generate image: plain color
func GenImageColor(width int, height int, color Color) Image

// Generate image: vertical gradient
func GenImageGradientV(width int, height int, top Color, bottom Color) Image

// Generate image: horizontal gradient
func GenImageGradientH(width int, height int, left Color, right Color) Image

// Generate image: radial gradient
func GenImageGradientRadial(width int, height int, density float64, inner Color, outer Color) Image

// Generate image: checked
func GenImageChecked(width int, height int, checksX int, checksY int, col1 Color, col2 Color) Image

// Generate image: white noise
func GenImageWhiteNoise(width int, height int, factor float64) Image

// Generate image: cellular algorithm, bigger tileSize means bigger cells
func GenImageCellular(width int, height int, tileSize int) Image

// Create an image duplicate (useful for transformations)
func ImageCopy(image Image) Image

// Create an image from another image piece
func ImageFromImage(image Image, rec Rectangle) Image

// Create an image from text (default font)
func ImageText(text string, fontSize int, color Color) Image

// Create an image from text (custom sprite font)
func ImageTextEx(font Font, text string, fontSize float64, spacing float64, tint Color) Image

// Convert image data to desired format
func ImageFormat(image *Image, newFormat int)

// Convert image to POT (power-of-two)
func ImageToPOT(image *Image, fill Color)

// Crop an image to a defined rectangle
func ImageCrop(image *Image, crop Rectangle)

// Crop image depending on alpha value
func ImageAlphaCrop(image *Image, threshold float64)

// Clear alpha channel to desired color
func ImageAlphaClear(image *Image, color Color, threshold float64)

// Apply alpha mask to image
func ImageAlphaMask(image *Image, alphaMask Image)

// Premultiply alpha channel
func ImageAlphaPremultiply(image *Image)

// Resize image (Bicubic scaling algorithm)
func ImageResize(image *Image, newWidth int, newHeight int)

// Resize image (Nearest-Neighbor scaling algorithm)
func ImageResizeNN(image *Image, newWidth int, newHeight int)

// Resize canvas and fill with color
func ImageResizeCanvas(image *Image, newWidth int, newHeight int, offsetX int, offsetY int, fill Color)

// Compute all mipmap levels for a provided image
func ImageMipmaps(image *Image)

// Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
func ImageDither(image *Image, rBpp int, gBpp int, bBpp int, aBpp int)

// Flip image vertically
func ImageFlipVertical(image *Image)

// Flip image horizontally
func ImageFlipHorizontal(image *Image)

// Rotate image clockwise 90deg
func ImageRotateCW(image *Image)

// Rotate image counter-clockwise 90deg
func ImageRotateCCW(image *Image)

// Modify image color: tint
func ImageColorTint(image *Image, color Color)

// Modify image color: invert
func ImageColorInvert(image *Image)

// Modify image color: grayscale
func ImageColorGrayscale(image *Image)

// Modify image color: contrast (-100 to 100)
func ImageColorContrast(image *Image, contrast float64)

// Modify image color: brightness (-255 to 255)
func ImageColorBrightness(image *Image, brightness int)

// Modify image color: replace color
func ImageColorReplace(image *Image, color Color, replace Color)

// Load color data from image as a Color array (RGBA - 32bit)
func LoadImageColors(image Image) *Color

// Load colors palette from image as a Color array (RGBA - 32bit)
func LoadImagePalette(image Image, maxPaletteSize int, colorCount *int) *Color

// Unload color data loaded with LoadImageColors()
func UnloadImageColors(colors *Color)

// Unload colors palette loaded with LoadImagePalette()
func UnloadImagePalette(colors *Color)

// Get image alpha border rectangle
func GetImageAlphaBorder(image Image, threshold float64) Rectangle

// Get image pixel color at (x, y) position
func GetImageColor(image Image, x int, y int) Color

// Clear image background with given color
func ImageClearBackground(dst *Image, color Color)

// Draw pixel within an image
func ImageDrawPixel(dst *Image, posX int, posY int, color Color)

// Draw pixel within an image (Vector version)
func ImageDrawPixelV(dst *Image, position Vec2, color Color)

// Draw line within an image
func ImageDrawLine(dst *Image, startPosX int, startPosY int, endPosX int, endPosY int, color Color)

// Draw line within an image (Vector version)
func ImageDrawLineV(dst *Image, start Vec2, end Vec2, color Color)

// Draw circle within an image
func ImageDrawCircle(dst *Image, centerX int, centerY int, radius int, color Color)

// Draw circle within an image (Vector version)
func ImageDrawCircleV(dst *Image, center Vec2, radius int, color Color)

// Draw rectangle within an image
func ImageDrawRectangle(dst *Image, posX int, posY int, width int, height int, color Color)

// Draw rectangle within an image (Vector version)
func ImageDrawRectangleV(dst *Image, position Vec2, size Vec2, color Color)

// Draw rectangle within an image
func ImageDrawRectangleRec(dst *Image, rec Rectangle, color Color)

// Draw rectangle lines within an image
func ImageDrawRectangleLines(dst *Image, rec Rectangle, thick int, color Color)

// Draw a source image within a destination image (tint applied to source)
func ImageDraw(dst *Image, src Image, srcRec Rectangle, dstRec Rectangle, tint Color)

// Draw text (using default font) within an image (destination)
func ImageDrawText(dst *Image, text string, posX int, posY int, fontSize int, color Color)

// Draw text (custom sprite font) within an image (destination)
func ImageDrawTextEx(dst *Image, font Font, text string, position Vec2, fontSize float64, spacing float64, tint Color)

// Load texture from file into GPU memory (VRAM)
func LoadTexture(fileName string) Texture

// Load texture from image data
func LoadTextureFromImage(image Image) Texture

// Load cubemap from image, multiple image cubemap layouts supported
func LoadTextureCubemap(image Image, layout int) TextureCubemap

// Load texture for rendering (framebuffer)
func LoadRenderTexture(width int, height int) RenderTexture2D

// Unload texture from GPU memory (VRAM)
func UnloadTexture(texture Texture)

// Unload render texture from GPU memory (VRAM)
func UnloadRenderTexture(target RenderTexture2D)

// Update GPU texture with new data
func UpdateTexture(texture Texture, pixels *byte)

// Update GPU texture rectangle with new data
func UpdateTextureRec(texture Texture, rec Rectangle, pixels *byte)

// Generate GPU mipmaps for a texture
func GenTextureMipmaps(texture *Texture)

// Set texture scaling filter mode
func SetTextureFilter(texture Texture, filter int)

// Set texture wrapping mode
func SetTextureWrap(texture Texture, wrap int)

// Draw a Texture2D
func DrawTexture(texture Texture, posX int, posY int, tint Color)

// Draw a Texture2D with position defined as Vector2
func DrawTextureV(texture Texture, position Vec2, tint Color)

// Draw a Texture2D with extended parameters
func DrawTextureEx(texture Texture, position Vec2, rotation float64, scale float64, tint Color)

// Draw a part of a texture defined by a rectangle
func DrawTextureRec(texture Texture, source Rectangle, position Vec2, tint Color)

// Draw texture quad with tiling and offset parameters
func DrawTextureQuad(texture Texture, tiling Vec2, offset Vec2, quad Rectangle, tint Color)

// Draw part of a texture (defined by a rectangle) with rotation and scale tiled into dest.
func DrawTextureTiled(texture Texture, source Rectangle, dest Rectangle, origin Vec2, rotation float64, scale float64, tint Color)

// Draw a part of a texture defined by a rectangle with 'pro' parameters
func DrawTexturePro(texture Texture, source Rectangle, dest Rectangle, origin Vec2, rotation float64, tint Color)

// Draws a texture (or part of it) that stretches or shrinks nicely
func DrawTextureNPatch(texture Texture, nPatchInfo NPatchInfo, dest Rectangle, origin Vec2, rotation float64, tint Color)

// Draw a textured polygon
func DrawTexturePoly(texture Texture, center Vec2, points *Vec2, texcoords *Vec2, pointCount int, tint Color)

// Get color with alpha applied, alpha goes from 0.0f to 1.0f
func Fade(color Color, alpha float64) Color

// Get hexadecimal value for a Color
func ColorToInt(color Color) int

// Get Color normalized as float [0..1]
func ColorNormalize(color Color) Vec4

// Get Color from normalized values [0..1]
func ColorFromNormalized(normalized Vec4) Color

// Get HSV values for a Color, hue [0..360], saturation/value [0..1]
func ColorToHSV(color Color) Vec3

// Get a Color from HSV values, hue [0..360], saturation/value [0..1]
func ColorFromHSV(hue float64, saturation float64, value float64) Color

// Get color with alpha applied, alpha goes from 0.0f to 1.0f
func ColorAlpha(color Color, alpha float64) Color

// Get src alpha-blended into dst color with tint
func ColorAlphaBlend(dst Color, src Color, tint Color) Color

// Get Color structure from hexadecimal value
func GetColor(hexValue uint) Color

// Get Color from a source pixel pointer of certain format
func GetPixelColor(srcPtr *byte, format int) Color

// Set color formatted into destination pixel pointer
func SetPixelColor(dstPtr *byte, color Color, format int)

// Get pixel data size in bytes for certain format
func GetPixelDataSize(width int, height int, format int) int

// Get the default Font
func GetFontDefault() Font

// Load font from file into GPU memory (VRAM)
func LoadFont(fileName string) Font

// Load font from file with extended parameters, use NULL for fontChars and 0 for glyphCount to load the default character set
func LoadFontEx(fileName string, fontSize int, fontChars *int, glyphCount int) Font

// Load font from Image (XNA style)
func LoadFontFromImage(image Image, key Color, firstChar int) Font

// Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
func LoadFontFromMemory(fileType string, fileData *byte, dataSize int, fontSize int, fontChars *int, glyphCount int) Font

// Load font data for further use
func LoadFontData(fileData *byte, dataSize int, fontSize int, fontChars *int, glyphCount int, typ int) *GlyphInfo

// Generate image font atlas using chars info
func GenImageFontAtlas(chars *GlyphInfo, recs **Rectangle, glyphCount int, fontSize int, padding int, packMethod int) Image

// Unload font chars info data (RAM)
func UnloadFontData(chars *GlyphInfo, glyphCount int)

// Unload font from GPU memory (VRAM)
func UnloadFont(font Font)

// Export font as code file, returns true on success
func ExportFontAsCode(font Font, fileName string) bool

// Draw current FPS
func DrawFPS(posX int, posY int)

// Draw text (using default font)
func DrawText(text string, posX int, posY int, fontSize int, color Color)

// Draw text using font and additional parameters
func DrawTextEx(font Font, text string, position Vec2, fontSize float64, spacing float64, tint Color)

// Draw text using Font and pro parameters (rotation)
func DrawTextPro(font Font, text string, position Vec2, origin Vec2, rotation float64, fontSize float64, spacing float64, tint Color)

// Draw one character (codepoint)
func DrawTextCodepoint(font Font, codepoint int, position Vec2, fontSize float64, tint Color)

// Measure string width for default font
func MeasureText(text string, fontSize int) int

// Measure string size for Font
func MeasureTextEx(font Font, text string, fontSize float64, spacing float64) Vec2

// Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
func GetGlyphIndex(font Font, codepoint int) int

// Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
func GetGlyphInfo(font Font, codepoint int) GlyphInfo

// Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
func GetGlyphAtlasRec(font Font, codepoint int) Rectangle

// Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
func LoadCodepoints(text string, count *int) *int

// Unload codepoints data from memory
func UnloadCodepoints(codepoints *int)

// Get total number of codepoints in a UTF-8 encoded string
func GetCodepointCount(text string) int

// Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
func GetCodepoint(text string, bytesProcessed *int) int

// Encode one codepoint into UTF-8 byte array (array length returned as parameter)
func CodepointToUTF8(codepoint int, byteSize *int) string

// Encode text as codepoints array into UTF-8 text string (WARNING: memory must be freed!)
func TextCodepointsToUTF8(codepoints *int, length int) *byte

// Copy one string to another, returns bytes copied
func TextCopy(dst *byte, src string) int

// Check if two text string are equal
func TextIsEqual(text1 string, text2 string) bool

// Get text length, checks for '\0' ending
func TextLength(text string) uint

// Text formatting with variables (sprintf() style)
func TextFormat(text string, args ...interface{}) string

// Get a piece of a text string
func TextSubtext(text string, position int, length int) string

// Replace text string (WARNING: memory must be freed!)
func TextReplace(text *byte, replace string, by string) *byte

// Insert text in a position (WARNING: memory must be freed!)
func TextInsert(text string, insert string, position int) *byte

// Join text strings with delimiter
func TextJoin(textList **byte, count int, delimiter string) string

// Split text into multiple strings
func TextSplit(text string, delimiter byte, count *int) **byte

// Append text at specific position and move cursor!
func TextAppend(text *byte, append string, position *int)

// Find first text occurrence within a string
func TextFindIndex(text string, find string) int

// Get upper case version of provided string
func TextToUpper(text string) string

// Get lower case version of provided string
func TextToLower(text string) string

// Get Pascal case notation version of provided string
func TextToPascal(text string) string

// Get integer value from text (negative values not supported)
func TextToInteger(text string) int

// Draw a line in 3D world space
func DrawLine3D(startPos Vec3, endPos Vec3, color Color)

// Draw a point in 3D space, actually a small line
func DrawPoint3D(position Vec3, color Color)

// Draw a circle in 3D world space
func DrawCircle3D(center Vec3, radius float64, rotationAxis Vec3, rotationAngle float64, color Color)

// Draw a color-filled triangle (vertex in counter-clockwise order!)
func DrawTriangle3D(v1 Vec3, v2 Vec3, v3 Vec3, color Color)

// Draw a triangle strip defined by points
func DrawTriangleStrip3D(points *Vec3, pointCount int, color Color)

// Draw cube
func DrawCube(position Vec3, width float64, height float64, length float64, color Color)

// Draw cube (Vector version)
func DrawCubeV(position Vec3, size Vec3, color Color)

// Draw cube wires
func DrawCubeWires(position Vec3, width float64, height float64, length float64, color Color)

// Draw cube wires (Vector version)
func DrawCubeWiresV(position Vec3, size Vec3, color Color)

// Draw cube textured
func DrawCubeTexture(texture Texture, position Vec3, width float64, height float64, length float64, color Color)

// Draw cube with a region of a texture
func DrawCubeTextureRec(texture Texture, source Rectangle, position Vec3, width float64, height float64, length float64, color Color)

// Draw sphere
func DrawSphere(centerPos Vec3, radius float64, color Color)

// Draw sphere with extended parameters
func DrawSphereEx(centerPos Vec3, radius float64, rings int, slices int, color Color)

// Draw sphere wires
func DrawSphereWires(centerPos Vec3, radius float64, rings int, slices int, color Color)

// Draw a cylinder/cone
func DrawCylinder(position Vec3, radiusTop float64, radiusBottom float64, height float64, slices int, color Color)

// Draw a cylinder with base at startPos and top at endPos
func DrawCylinderEx(startPos Vec3, endPos Vec3, startRadius float64, endRadius float64, sides int, color Color)

// Draw a cylinder/cone wires
func DrawCylinderWires(position Vec3, radiusTop float64, radiusBottom float64, height float64, slices int, color Color)

// Draw a cylinder wires with base at startPos and top at endPos
func DrawCylinderWiresEx(startPos Vec3, endPos Vec3, startRadius float64, endRadius float64, sides int, color Color)

// Draw a plane XZ
func DrawPlane(centerPos Vec3, size Vec2, color Color)

// Draw a ray line
func DrawRay(ray Ray, color Color)

// Draw a grid (centered at (0, 0, 0))
func DrawGrid(slices int, spacing float64)

// Load model from files (meshes and materials)
func LoadModel(fileName string) Model

// Load model from generated mesh (default material)
func LoadModelFromMesh(mesh Mesh) Model

// Unload model (including meshes) from memory (RAM and/or VRAM)
func UnloadModel(model Model)

// Unload model (but not meshes) from memory (RAM and/or VRAM)
func UnloadModelKeepMeshes(model Model)

// Compute model bounding box limits (considers all meshes)
func GetModelBoundingBox(model Model) BoundingBox

// Draw a model (with texture if set)
func DrawModel(model Model, position Vec3, scale float64, tint Color)

// Draw a model with extended parameters
func DrawModelEx(model Model, position Vec3, rotationAxis Vec3, rotationAngle float64, scale Vec3, tint Color)

// Draw a model wires (with texture if set)
func DrawModelWires(model Model, position Vec3, scale float64, tint Color)

// Draw a model wires (with texture if set) with extended parameters
func DrawModelWiresEx(model Model, position Vec3, rotationAxis Vec3, rotationAngle float64, scale Vec3, tint Color)

// Draw bounding box (wires)
func DrawBoundingBox(box BoundingBox, color Color)

// Draw a billboard texture
func DrawBillboard(camera Camera, texture Texture, position Vec3, size float64, tint Color)

// Draw a billboard texture defined by source
func DrawBillboardRec(camera Camera, texture Texture, source Rectangle, position Vec3, size Vec2, tint Color)

// Draw a billboard texture defined by source and rotation
func DrawBillboardPro(camera Camera, texture Texture, source Rectangle, position Vec3, up Vec3, size Vec2, origin Vec2, rotation float64, tint Color)

// Upload mesh vertex data in GPU and provide VAO/VBO ids
func UploadMesh(mesh *Mesh, dynamic bool)

// Update mesh vertex data in GPU for a specific buffer index
func UpdateMeshBuffer(mesh Mesh, index int, data *byte, dataSize int, offset int)

// Unload mesh data from CPU and GPU
func UnloadMesh(mesh Mesh)

// Draw a 3d mesh with material and transform
func DrawMesh(mesh Mesh, material Material, transform Matrix)

// Draw multiple mesh instances with material and different transforms
func DrawMeshInstanced(mesh Mesh, material Material, transforms *Matrix, instances int)

// Export mesh data to file, returns true on success
func ExportMesh(mesh Mesh, fileName string) bool

// Compute mesh bounding box limits
func GetMeshBoundingBox(mesh Mesh) BoundingBox

// Compute mesh tangents
func GenMeshTangents(mesh *Mesh)

// Compute mesh binormals
func GenMeshBinormals(mesh *Mesh)

// Generate polygonal mesh
func GenMeshPoly(sides int, radius float64) Mesh

// Generate plane mesh (with subdivisions)
func GenMeshPlane(width float64, length float64, resX int, resZ int) Mesh

// Generate cuboid mesh
func GenMeshCube(width float64, height float64, length float64) Mesh

// Generate sphere mesh (standard sphere)
func GenMeshSphere(radius float64, rings int, slices int) Mesh

// Generate half-sphere mesh (no bottom cap)
func GenMeshHemiSphere(radius float64, rings int, slices int) Mesh

// Generate cylinder mesh
func GenMeshCylinder(radius float64, height float64, slices int) Mesh

// Generate cone/pyramid mesh
func GenMeshCone(radius float64, height float64, slices int) Mesh

// Generate torus mesh
func GenMeshTorus(radius float64, size float64, radSeg int, sides int) Mesh

// Generate trefoil knot mesh
func GenMeshKnot(radius float64, size float64, radSeg int, sides int) Mesh

// Generate heightmap mesh from image data
func GenMeshHeightmap(heightmap Image, size Vec3) Mesh

// Generate cubes-based map mesh from image data
func GenMeshCubicmap(cubicmap Image, cubeSize Vec3) Mesh

// Load materials from model file
func LoadMaterials(fileName string, materialCount *int) *Material

// Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
func LoadMaterialDefault() Material

// Unload material from GPU memory (VRAM)
func UnloadMaterial(material Material)

// Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
func SetMaterialTexture(material *Material, mapType int, texture Texture)

// Set material for a mesh
func SetModelMeshMaterial(model *Model, meshId int, materialId int)

// Load model animations from file
func LoadModelAnimations(fileName string, animCount *uint) *ModelAnimation

// Update model animation pose
func UpdateModelAnimation(model Model, anim ModelAnimation, frame int)

// Unload animation data
func UnloadModelAnimation(anim ModelAnimation)

// Unload animation array data
func UnloadModelAnimations(animations *ModelAnimation, count uint)

// Check model animation skeleton match
func IsModelAnimationValid(model Model, anim ModelAnimation) bool

// Check collision between two spheres
func CheckCollisionSpheres(center1 Vec3, radius1 float64, center2 Vec3, radius2 float64) bool

// Check collision between two bounding boxes
func CheckCollisionBoxes(box1 BoundingBox, box2 BoundingBox) bool

// Check collision between box and sphere
func CheckCollisionBoxSphere(box BoundingBox, center Vec3, radius float64) bool

// Get collision info between ray and sphere
func GetRayCollisionSphere(ray Ray, center Vec3, radius float64) RayCollision

// Get collision info between ray and box
func GetRayCollisionBox(ray Ray, box BoundingBox) RayCollision

// Get collision info between ray and model
func GetRayCollisionModel(ray Ray, model Model) RayCollision

// Get collision info between ray and mesh
func GetRayCollisionMesh(ray Ray, mesh Mesh, transform Matrix) RayCollision

// Get collision info between ray and triangle
func GetRayCollisionTriangle(ray Ray, p1 Vec3, p2 Vec3, p3 Vec3) RayCollision

// Get collision info between ray and quad
func GetRayCollisionQuad(ray Ray, p1 Vec3, p2 Vec3, p3 Vec3, p4 Vec3) RayCollision

// Initialize audio device and context
func InitAudioDevice()

// Close the audio device and context
func CloseAudioDevice()

// Check if audio device has been initialized successfully
func IsAudioDeviceReady() bool

// Set master volume (listener)
func SetMasterVolume(volume float64)

// Load wave data from file
func LoadWave(fileName string) Wave

// Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
func LoadWaveFromMemory(fileType string, fileData *byte, dataSize int) Wave

// Load sound from file
func LoadSound(fileName string) Sound

// Load sound from wave data
func LoadSoundFromWave(wave Wave) Sound

// Update sound buffer with new data
func UpdateSound(sound Sound, data *byte, sampleCount int)

// Unload wave data
func UnloadWave(wave Wave)

// Unload sound
func UnloadSound(sound Sound)

// Export wave data to file, returns true on success
func ExportWave(wave Wave, fileName string) bool

// Export wave sample data to code (.h), returns true on success
func ExportWaveAsCode(wave Wave, fileName string) bool

// Play a sound
func PlaySound(sound Sound)

// Stop playing a sound
func StopSound(sound Sound)

// Pause a sound
func PauseSound(sound Sound)

// Resume a paused sound
func ResumeSound(sound Sound)

// Play a sound (using multichannel buffer pool)
func PlaySoundMulti(sound Sound)

// Stop any sound playing (using multichannel buffer pool)
func StopSoundMulti()

// Get number of sounds playing in the multichannel
func GetSoundsPlaying() int

// Check if a sound is currently playing
func IsSoundPlaying(sound Sound) bool

// Set volume for a sound (1.0 is max level)
func SetSoundVolume(sound Sound, volume float64)

// Set pitch for a sound (1.0 is base level)
func SetSoundPitch(sound Sound, pitch float64)

// Convert wave data to desired format
func WaveFormat(wave *Wave, sampleRate int, sampleSize int, channels int)

// Copy a wave to a new wave
func WaveCopy(wave Wave) Wave

// Crop a wave to defined samples range
func WaveCrop(wave *Wave, initSample int, finalSample int)

// Load samples data from wave as a floats array
func LoadWaveSamples(wave Wave) *float64

// Unload samples data loaded with LoadWaveSamples()
func UnloadWaveSamples(samples *float64)

// Load music stream from file
func LoadMusicStream(fileName string) Music

// Load music stream from data
func LoadMusicStreamFromMemory(fileType string, data *byte, dataSize int) Music

// Unload music stream
func UnloadMusicStream(music Music)

// Start music playing
func PlayMusicStream(music Music)

// Check if music is playing
func IsMusicStreamPlaying(music Music) bool

// Updates buffers for music streaming
func UpdateMusicStream(music Music)

// Stop music playing
func StopMusicStream(music Music)

// Pause music playing
func PauseMusicStream(music Music)

// Resume playing paused music
func ResumeMusicStream(music Music)

// Seek music to a position (in seconds)
func SeekMusicStream(music Music, position float64)

// Set volume for music (1.0 is max level)
func SetMusicVolume(music Music, volume float64)

// Set pitch for a music (1.0 is base level)
func SetMusicPitch(music Music, pitch float64)

// Get music time length (in seconds)
func GetMusicTimeLength(music Music) float64

// Get current music time played (in seconds)
func GetMusicTimePlayed(music Music) float64

// Load audio stream (to stream raw audio pcm data)
func LoadAudioStream(sampleRate uint, sampleSize uint, channels uint) AudioStream

// Unload audio stream and free memory
func UnloadAudioStream(stream AudioStream)

// Update audio stream buffers with data
func UpdateAudioStream(stream AudioStream, data *byte, frameCount int)

// Check if any audio stream buffers requires refill
func IsAudioStreamProcessed(stream AudioStream) bool

// Play audio stream
func PlayAudioStream(stream AudioStream)

// Pause audio stream
func PauseAudioStream(stream AudioStream)

// Resume audio stream
func ResumeAudioStream(stream AudioStream)

// Check if audio stream is playing
func IsAudioStreamPlaying(stream AudioStream) bool

// Stop audio stream
func StopAudioStream(stream AudioStream)

// Set volume for audio stream (1.0 is max level)
func SetAudioStreamVolume(stream AudioStream, volume float64)

// Set pitch for audio stream (1.0 is base level)
func SetAudioStreamPitch(stream AudioStream, pitch float64)

// Default size for new audio streams
func SetAudioStreamBufferSizeDefault(size int)
